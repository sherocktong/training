# 日报 | 2025-08-8

## 今日完成
- 学习maven 单元测试 web基础部分

## 明日计划 
- 学习web基础 mysql jdbc mybatis

## 遇到困难
- 无



```Maven quickstart
public class HellowWorld {
    public static void main(String[] args) {
        System.out.println("Hello Maven");
    }
}
```



```Maven quickstart2
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;

public class UserService {

    /**
     * 给定一个身份证号, 计算出该用户的年龄
     * @param idCard 身份证号
     */
    public Integer getAge(String idCard){
        if (idCard == null || idCard.length() != 18) {
            throw new IllegalArgumentException("无效的身份证号码");
        }
        String birthday = idCard.substring(6, 14);
        LocalDate parse = LocalDate.parse(birthday, DateTimeFormatter.ofPattern("yyyyMMdd"));
        return Period.between(parse, LocalDate.now()).getYears();
    }

    /**
     * 给定一个身份证号, 计算出该用户的性别
     * @param idCard 身份证号
     */
    public String getGender(String idCard){
        if (idCard == null || idCard.length() != 18) {
            throw new IllegalArgumentException("无效的身份证号码");
        }
        return Integer.parseInt(idCard.substring(16,17)) % 2 == 1 ? "男" : "女";
    }

}

```



```test
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

public class UserServiceTest {


    @BeforeAll
    public static void beforeAll() {
        System.out.println("开始测试");
    }

    @AfterAll
    public static void afterAll() {
        System.out.println("测试结束");
    }

    @BeforeEach
    public void beforeEach() {
        System.out.println("开始测试方法");
    }

    @AfterEach
    public void afterEach() {
        System.out.println("结束测试方法");
    }
    @Test
    public void testGetAge() {
        UserService userService = new UserService();
        Integer age = userService.getAge("100000200010011011");
        System.out.println(age);
    }

    @Test
    public void testGetGender() {
        UserService userService = new UserService();
        String gender = userService.getGender("100000200010011011");
        System.out.println(gender);
    }


    @Test
    public void testGenderWithAssert() {
        UserService userService = new UserService();
        String gender = userService.getGender("100000200010011022");
        Assertions.assertEquals("男", gender, "性别计算错误");
    }

    @Test
    public void testGenderWithAssert2() {
        UserService userService = new UserService();
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            userService.getGender("null");
        });

    }
//参数化测试
    @DisplayName("性别测试")
    @ParameterizedTest
    @ValueSource(strings = {"100000200010011011", "100000200010011022"})
    public void testGenderWithParameterized(String idCard) {
        UserService userService = new UserService();
        String gender = userService.getGender(idCard);
        Assertions.assertEquals("男", gender);
    }

}
```


```
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

public class UserServiceTest {


    @BeforeAll
    public static void beforeAll() {
        System.out.println("开始测试");
    }

    @AfterAll
    public static void afterAll() {
        System.out.println("测试结束");
    }

    @BeforeEach
    public void beforeEach() {
        System.out.println("开始测试方法");
    }

    @AfterEach
    public void afterEach() {
        System.out.println("结束测试方法");
    }
    @Test
    public void testGetAge() {
        UserService userService = new UserService();
        Integer age = userService.getAge("100000200010011011");
        System.out.println(age);
    }

    @Test
    public void testGetGender() {
        UserService userService = new UserService();
        String gender = userService.getGender("100000200010011011");
        System.out.println(gender);
    }


    @Test
    public void testGenderWithAssert() {
        UserService userService = new UserService();
        String gender = userService.getGender("100000200010011022");
        Assertions.assertEquals("男", gender, "性别计算错误");
    }

    @Test
    public void testGenderWithAssert2() {
        UserService userService = new UserService();
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            userService.getGender("null");
        });

    }
//参数化测试
    @DisplayName("性别测试")
    @ParameterizedTest
    @ValueSource(strings = {"100000200010011011", "100000200010011022"})
    public void testGenderWithParameterized(String idCard) {
        UserService userService = new UserService();
        String gender = userService.getGender(idCard);
        Assertions.assertEquals("男", gender);
    }

}
```


```Springboot-web-quickstart
package org.example;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HellowController {

    @RequestMapping("/hello")
    public String hello(String name) {
        System.out.println("name:"+name);
        return "hello "+ name+"~";
    }
}

```

